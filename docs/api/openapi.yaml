openapi: 3.1.0
info:
  title: Digivault API
  version: 0.1.0
  description: |
    Contract-based API for Digivault (single-vendor digital goods).
    MVP focus: catalog -> payment -> payment webhook -> secure delivery.

servers:
  - url: http://localhost:4000
    description: Local API (dev)
  - url: https://api.staging.digivault.example
    description: Staging
  - url: https://api.digivault.example
    description: Production

tags:
  - name: Catalog
  - name: Checkout
  - name: Delivery
  - name: Webhooks
  - name: Admin
  - name: Auth

paths:
  /health:
    get:
      summary: Health check
      tags:
        - Admin
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login with email & password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            examples:
              default:
                value:
                  { "email": "admin@digivault.dev", "password": "password" }
      responses:
        "200":
          description: Logged in
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
              examples:
                ok:
                  value:
                    success: true
                    data:
                      token: "xxx.yyy.zzz"
                      token_type: "Bearer"
                      user:
                        { id: 1, email: "admin@digivault.dev", is_active: true }
                    error: null
        "422":
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                invalid:
                  value:
                    { success: false, data: null, error: "Invalid credentials" }

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Current user
          content:
            application/json:
              schema: { $ref: "#/components/schemas/MeResponse" }
              examples:
                ok:
                  value:
                    success: true
                    data:
                      {
                        id: 1,
                        email: "admin@digivault.dev",
                        is_active: true,
                        created_at: "2025-08-19T09:00:00Z",
                        updated_at: "2025-08-19T09:00:00Z",
                      }
                    error: null
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }
              examples:
                noToken:
                  value:
                    { success: false, data: null, error: "Unauthenticated." }

  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (revoke current token)
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: Logged out
          content:
            application/json:
              schema: { $ref: "#/components/schemas/BasicOk" }
              examples:
                ok:
                  value: { success: true, data: null, error: null }
        "401":
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: "#/components/schemas/ErrorResponse" }

  /products:
    get:
      summary: List products
      tags:
        - Catalog
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Optional search query
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - in: query
          name: cursor
          schema:
            type: string
          description: Opaque cursor for pagination
      responses:
        "200":
          description: OK
          headers:
            x-next-cursor:
              schema:
                type: string
              description: Cursor for next page (if any)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductList"

  /products/{id}:
    get:
      summary: Get product detail
      tags:
        - Catalog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /checkout:
    post:
      summary: Create checkout session
      description: |
        Create a **pending** order and create a payment session in the payment gateway.
        Use **Idempotency-Key** header to prevent double submission.
      tags:
        - Checkout
      parameters:
        - in: header
          name: Idempotency-Key
          required: false
          schema:
            type: string
            maxLength: 128
          description: Client-provided idempotency key to prevent duplicates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CheckoutRequest"
            examples:
              basic:
                value:
                  email: buyer@example.com
                  items:
                    - productId: "prod_abc123"
                      quantity: 1
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CheckoutSession"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders/{orderId}/delivery:
    get:
      summary: Get delivery (links & license keys)
      description: Returns signed URLs (short expiry) and/or license keys after successful payment.
      tags:
        - Delivery
      parameters:
        - in: path
          name: orderId
          required: true
          schema:
            type: string
      security:
        - bearerAuth: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delivery"
        "403":
          description: Order not paid or access denied
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Order not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /webhooks/payment:
    post:
      summary: Payment gateway webhook
      description: |
        Endpoint receives events from the gateway (at-least-once delivery).
        Handler MUST be idempotent: deduplicate by `event.id`.
      tags:
        - Webhooks
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PaymentEvent"
      parameters:
        - in: header
          name: X-Signature
          required: true
          schema:
            type: string
          description: HMAC signature from gateway
        - in: header
          name: X-Event-Id
          required: true
          schema:
            type: string
          description: Unique event ID from gateway
        - in: header
          name: X-Event-Timestamp
          required: true
          schema:
            type: string
            format: date-time
          description: Event timestamp
      responses:
        "200":
          description: ACK received
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookAck"
        "400":
          description: Invalid payload
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Invalid signature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  # --- Admin (MVP minimal; can be disabled in prod) ---
  /admin/products:
    post:
      summary: Create product
      tags:
        - Admin
      security:
        - bearerAuth: []
      x-roles:
        - admin
        - staff
      description: Requires role `admin` or `staff` with permission `product.write`.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Health:
      type: object
      properties:
        status:
          type: string
          example: ok
        time:
          type: string
          format: date-time

    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email, example: admin@digivault.dev }
        password: { type: string, format: password, example: password }

    User:
      type: object
      required: [id, email, is_active]
      properties:
        id: { type: integer, example: 1 }
        email: { type: string, format: email }
        is_active: { type: boolean, example: true }
        created_at: { type: string, format: date-time, nullable: true }
        updated_at: { type: string, format: date-time, nullable: true }

    AuthResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data:
          type: object
          properties:
            token: { type: string }
            token_type: { type: string, example: Bearer }
            user: { $ref: "#/components/schemas/User" }
        error: { type: [string, "null"], nullable: true }

    MeResponse:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { $ref: "#/components/schemas/User" }
        error: { type: [string, "null"], nullable: true }

    Money:
      type: object
      properties:
        amount:
          type: integer
          description: Amount in minor units (e.g. cents)
          example: 49900
        currency:
          type: string
          example: IDR
      required:
        - amount
        - currency

    Product:
      type: object
      properties:
        id:
          type: string
          example: prod_abc123
        slug:
          type: string
          example: ebook-pro
        name:
          type: string
          example: E-Book Pro
        description:
          type: string
        price:
          $ref: "#/components/schemas/Money"
        hasLicense:
          type: boolean
          description: true if product generates a license key
        assets:
          type: array
          items:
            type: object
            properties:
              kind:
                type: string
                enum: [file, image]
              url:
                type: string
                format: uri
                description: Public image URL; files are served via signed URL at delivery
      required:
        - id
        - slug
        - name
        - price
        - hasLicense

    ProductList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    ProductCreate:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        description:
          type: string
        price:
          $ref: "#/components/schemas/Money"
        hasLicense:
          type: boolean
          default: false
      required:
        - name
        - slug
        - price

    CheckoutItem:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
          default: 1
      required:
        - productId
        - quantity

    CheckoutRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        items:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/CheckoutItem"
      required:
        - email
        - items

    CheckoutSession:
      type: object
      properties:
        orderId:
          type: string
          example: ord_123
        payUrl:
          type: string
          format: uri
        expiresAt:
          type: string
          format: date-time
      required:
        - orderId
        - payUrl

    DeliveryLink:
      type: object
      properties:
        name:
          type: string
          example: Ebook-Pro.pdf
        url:
          type: string
          format: uri
          description: Signed URL with expiry
        expiresAt:
          type: string
          format: date-time

    Delivery:
      type: object
      properties:
        orderId:
          type: string
        status:
          type: string
          enum: [pending, paid, fulfilled]
        links:
          type: array
          items:
            $ref: "#/components/schemas/DeliveryLink"
        licenseKeys:
          type: array
          items:
            type: string
      required:
        - orderId
        - status

    PaymentEvent:
      type: object
      description: Generic payment event envelope (adjust to chosen gateway).
      properties:
        id:
          type: string
          example: evt_9a8b7c
        type:
          type: string
          example: payment.succeeded
        data:
          type: object
          properties:
            orderId:
              type: string
              example: ord_123
            amount:
              $ref: "#/components/schemas/Money"
            currency:
              type: string
              example: IDR
            status:
              type: string
              example: succeeded
            txnId:
              type: string
              example: txn_456
      required:
        - id
        - type
        - data

    WebhookAck:
      type: object
      properties:
        received:
          type: boolean
          example: true
        deduped:
          type: boolean
          example: false

    BasicOk:
      type: object
      properties:
        success: { type: boolean, example: true }
        data: { type: "null", nullable: true }
        error: { type: "null", nullable: true }

    ErrorResponse:
      type: object
      properties:
        success: { type: boolean, example: false }
        data: { type: "null", nullable: true }
        error:
          oneOf:
            - { type: string, example: "Invalid credentials" }
            - { type: object, additionalProperties: true }

    Error:
      type: object
      properties:
        code:
          type: string
          example: invalid_request
        message:
          type: string
          example: Email is required
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: items[0].productId
              issue:
                type: string
                example: not_found
      required:
        - code
        - message
