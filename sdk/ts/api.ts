/* tslint:disable */
/* eslint-disable */
/**
 * Digivault API
 * Contract-based API for Digivault (single-vendor digital goods). MVP focus: catalog -> payment -> payment webhook -> secure delivery. 
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {boolean}
     * @memberof AuthResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {AuthResponseData}
     * @memberof AuthResponse
     */
    'data'?: AuthResponseData;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'error'?: string | null;
}
/**
 * 
 * @export
 * @interface AuthResponseData
 */
export interface AuthResponseData {
    /**
     * 
     * @type {string}
     * @memberof AuthResponseData
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponseData
     */
    'token_type'?: string;
    /**
     * 
     * @type {User}
     * @memberof AuthResponseData
     */
    'user'?: User;
}
/**
 * 
 * @export
 * @interface BasicOk
 */
export interface BasicOk {
    /**
     * 
     * @type {boolean}
     * @memberof BasicOk
     */
    'success'?: boolean;
    /**
     * 
     * @type {any}
     * @memberof BasicOk
     */
    'data'?: any | null;
    /**
     * 
     * @type {any}
     * @memberof BasicOk
     */
    'error'?: any | null;
}
/**
 * 
 * @export
 * @interface CheckoutItem
 */
export interface CheckoutItem {
    /**
     * 
     * @type {string}
     * @memberof CheckoutItem
     */
    'productId': string;
    /**
     * 
     * @type {number}
     * @memberof CheckoutItem
     */
    'quantity': number;
}
/**
 * 
 * @export
 * @interface CheckoutRequest
 */
export interface CheckoutRequest {
    /**
     * 
     * @type {string}
     * @memberof CheckoutRequest
     */
    'email': string;
    /**
     * 
     * @type {Array<CheckoutItem>}
     * @memberof CheckoutRequest
     */
    'items': Array<CheckoutItem>;
}
/**
 * 
 * @export
 * @interface CheckoutSession
 */
export interface CheckoutSession {
    /**
     * 
     * @type {string}
     * @memberof CheckoutSession
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutSession
     */
    'payUrl': string;
    /**
     * 
     * @type {string}
     * @memberof CheckoutSession
     */
    'expiresAt'?: string;
}
/**
 * 
 * @export
 * @interface Delivery
 */
export interface Delivery {
    /**
     * 
     * @type {string}
     * @memberof Delivery
     */
    'orderId': string;
    /**
     * 
     * @type {string}
     * @memberof Delivery
     */
    'status': DeliveryStatusEnum;
    /**
     * 
     * @type {Array<DeliveryLink>}
     * @memberof Delivery
     */
    'links'?: Array<DeliveryLink>;
    /**
     * 
     * @type {Array<string>}
     * @memberof Delivery
     */
    'licenseKeys'?: Array<string>;
}

export const DeliveryStatusEnum = {
    Pending: 'pending',
    Paid: 'paid',
    Fulfilled: 'fulfilled'
} as const;

export type DeliveryStatusEnum = typeof DeliveryStatusEnum[keyof typeof DeliveryStatusEnum];

/**
 * 
 * @export
 * @interface DeliveryLink
 */
export interface DeliveryLink {
    /**
     * 
     * @type {string}
     * @memberof DeliveryLink
     */
    'name'?: string;
    /**
     * Signed URL with expiry
     * @type {string}
     * @memberof DeliveryLink
     */
    'url'?: string;
    /**
     * 
     * @type {string}
     * @memberof DeliveryLink
     */
    'expiresAt'?: string;
}
/**
 * 
 * @export
 * @interface ErrorDetailsInner
 */
export interface ErrorDetailsInner {
    /**
     * 
     * @type {string}
     * @memberof ErrorDetailsInner
     */
    'field'?: string;
    /**
     * 
     * @type {string}
     * @memberof ErrorDetailsInner
     */
    'issue'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {boolean}
     * @memberof ErrorResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {any}
     * @memberof ErrorResponse
     */
    'data'?: any | null;
    /**
     * 
     * @type {ErrorResponseError}
     * @memberof ErrorResponse
     */
    'error'?: ErrorResponseError;
}
/**
 * @type ErrorResponseError
 * @export
 */
export type ErrorResponseError = string | { [key: string]: any; };

/**
 * 
 * @export
 * @interface Health
 */
export interface Health {
    /**
     * 
     * @type {string}
     * @memberof Health
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof Health
     */
    'time'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface MeResponse
 */
export interface MeResponse {
    /**
     * 
     * @type {boolean}
     * @memberof MeResponse
     */
    'success'?: boolean;
    /**
     * 
     * @type {User}
     * @memberof MeResponse
     */
    'data'?: User;
    /**
     * 
     * @type {string}
     * @memberof MeResponse
     */
    'error'?: string | null;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
    /**
     * 
     * @type {Array<ErrorDetailsInner>}
     * @memberof ModelError
     */
    'details'?: Array<ErrorDetailsInner>;
}
/**
 * 
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Amount in minor units (e.g. cents)
     * @type {number}
     * @memberof Money
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Money
     */
    'currency': string;
}
/**
 * Generic payment event envelope (adjust to chosen gateway).
 * @export
 * @interface PaymentEvent
 */
export interface PaymentEvent {
    /**
     * 
     * @type {string}
     * @memberof PaymentEvent
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEvent
     */
    'type': string;
    /**
     * 
     * @type {PaymentEventData}
     * @memberof PaymentEvent
     */
    'data': PaymentEventData;
}
/**
 * 
 * @export
 * @interface PaymentEventData
 */
export interface PaymentEventData {
    /**
     * 
     * @type {string}
     * @memberof PaymentEventData
     */
    'orderId'?: string;
    /**
     * 
     * @type {Money}
     * @memberof PaymentEventData
     */
    'amount'?: Money;
    /**
     * 
     * @type {string}
     * @memberof PaymentEventData
     */
    'currency'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEventData
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof PaymentEventData
     */
    'txnId'?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description'?: string;
    /**
     * 
     * @type {Money}
     * @memberof Product
     */
    'price': Money;
    /**
     * true if product generates a license key
     * @type {boolean}
     * @memberof Product
     */
    'hasLicense': boolean;
    /**
     * 
     * @type {Array<ProductAssetsInner>}
     * @memberof Product
     */
    'assets'?: Array<ProductAssetsInner>;
}
/**
 * 
 * @export
 * @interface ProductAssetsInner
 */
export interface ProductAssetsInner {
    /**
     * 
     * @type {string}
     * @memberof ProductAssetsInner
     */
    'kind'?: ProductAssetsInnerKindEnum;
    /**
     * Public image URL; files are served via signed URL at delivery
     * @type {string}
     * @memberof ProductAssetsInner
     */
    'url'?: string;
}

export const ProductAssetsInnerKindEnum = {
    File: 'file',
    Image: 'image'
} as const;

export type ProductAssetsInnerKindEnum = typeof ProductAssetsInnerKindEnum[keyof typeof ProductAssetsInnerKindEnum];

/**
 * 
 * @export
 * @interface ProductCreate
 */
export interface ProductCreate {
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'slug': string;
    /**
     * 
     * @type {string}
     * @memberof ProductCreate
     */
    'description'?: string;
    /**
     * 
     * @type {Money}
     * @memberof ProductCreate
     */
    'price': Money;
    /**
     * 
     * @type {boolean}
     * @memberof ProductCreate
     */
    'hasLicense'?: boolean;
}
/**
 * 
 * @export
 * @interface ProductList
 */
export interface ProductList {
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductList
     */
    'data'?: Array<Product>;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {boolean}
     * @memberof User
     */
    'is_active': boolean;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface WebhookAck
 */
export interface WebhookAck {
    /**
     * 
     * @type {boolean}
     * @memberof WebhookAck
     */
    'received'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof WebhookAck
     */
    'deduped'?: boolean;
}

/**
 * AdminApi - axios parameter creator
 * @export
 */
export const AdminApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requires role `admin` or `staff` with permission `product.write`.
         * @summary Create product
         * @param {ProductCreate} productCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminProductsPost: async (productCreate: ProductCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productCreate' is not null or undefined
            assertParamExists('adminProductsPost', 'productCreate', productCreate)
            const localVarPath = `/admin/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(productCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminApi - functional programming interface
 * @export
 */
export const AdminApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminApiAxiosParamCreator(configuration)
    return {
        /**
         * Requires role `admin` or `staff` with permission `product.write`.
         * @summary Create product
         * @param {ProductCreate} productCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminProductsPost(productCreate: ProductCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminProductsPost(productCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.adminProductsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Health>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AdminApi.healthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AdminApi - factory interface
 * @export
 */
export const AdminApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminApiFp(configuration)
    return {
        /**
         * Requires role `admin` or `staff` with permission `product.write`.
         * @summary Create product
         * @param {AdminApiAdminProductsPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminProductsPost(requestParameters: AdminApiAdminProductsPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.adminProductsPost(requestParameters.productCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthGet(options?: RawAxiosRequestConfig): AxiosPromise<Health> {
            return localVarFp.healthGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for adminProductsPost operation in AdminApi.
 * @export
 * @interface AdminApiAdminProductsPostRequest
 */
export interface AdminApiAdminProductsPostRequest {
    /**
     * 
     * @type {ProductCreate}
     * @memberof AdminApiAdminProductsPost
     */
    readonly productCreate: ProductCreate
}

/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export class AdminApi extends BaseAPI {
    /**
     * Requires role `admin` or `staff` with permission `product.write`.
     * @summary Create product
     * @param {AdminApiAdminProductsPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public adminProductsPost(requestParameters: AdminApiAdminProductsPostRequest, options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).adminProductsPost(requestParameters.productCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    public healthGet(options?: RawAxiosRequestConfig) {
        return AdminApiFp(this.configuration).healthGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login with email & password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('authLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout (revoke current token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login with email & password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Logout (revoke current token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLogoutPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BasicOk>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLogoutPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLogoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login with email & password
         * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(requestParameters: AuthApiAuthLoginPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<AuthResponse> {
            return localVarFp.authLoginPost(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout (revoke current token)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLogoutPost(options?: RawAxiosRequestConfig): AxiosPromise<BasicOk> {
            return localVarFp.authLogoutPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet(options?: RawAxiosRequestConfig): AxiosPromise<MeResponse> {
            return localVarFp.authMeGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for authLoginPost operation in AuthApi.
 * @export
 * @interface AuthApiAuthLoginPostRequest
 */
export interface AuthApiAuthLoginPostRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof AuthApiAuthLoginPost
     */
    readonly loginRequest: LoginRequest
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login with email & password
     * @param {AuthApiAuthLoginPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(requestParameters: AuthApiAuthLoginPostRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout (revoke current token)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLogoutPost(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authMeGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authMeGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List products
         * @param {string} [q] Optional search query
         * @param {number} [limit] 
         * @param {string} [cursor] Opaque cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet: async (q?: string, limit?: number, cursor?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/products`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get product detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('productsIdGet', 'id', id)
            const localVarPath = `/products/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List products
         * @param {string} [q] Optional search query
         * @param {number} [limit] 
         * @param {string} [cursor] Opaque cursor for pagination
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsGet(q?: string, limit?: number, cursor?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsGet(q, limit, cursor, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogApi.productsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get product detail
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async productsIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.productsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CatalogApi.productsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * 
         * @summary List products
         * @param {CatalogApiProductsGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsGet(requestParameters: CatalogApiProductsGetRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<ProductList> {
            return localVarFp.productsGet(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get product detail
         * @param {CatalogApiProductsIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        productsIdGet(requestParameters: CatalogApiProductsIdGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Product> {
            return localVarFp.productsIdGet(requestParameters.id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for productsGet operation in CatalogApi.
 * @export
 * @interface CatalogApiProductsGetRequest
 */
export interface CatalogApiProductsGetRequest {
    /**
     * Optional search query
     * @type {string}
     * @memberof CatalogApiProductsGet
     */
    readonly q?: string

    /**
     * 
     * @type {number}
     * @memberof CatalogApiProductsGet
     */
    readonly limit?: number

    /**
     * Opaque cursor for pagination
     * @type {string}
     * @memberof CatalogApiProductsGet
     */
    readonly cursor?: string
}

/**
 * Request parameters for productsIdGet operation in CatalogApi.
 * @export
 * @interface CatalogApiProductsIdGetRequest
 */
export interface CatalogApiProductsIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof CatalogApiProductsIdGet
     */
    readonly id: string
}

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * 
     * @summary List products
     * @param {CatalogApiProductsGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public productsGet(requestParameters: CatalogApiProductsGetRequest = {}, options?: RawAxiosRequestConfig) {
        return CatalogApiFp(this.configuration).productsGet(requestParameters.q, requestParameters.limit, requestParameters.cursor, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get product detail
     * @param {CatalogApiProductsIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public productsIdGet(requestParameters: CatalogApiProductsIdGetRequest, options?: RawAxiosRequestConfig) {
        return CatalogApiFp(this.configuration).productsIdGet(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CheckoutApi - axios parameter creator
 * @export
 */
export const CheckoutApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a **pending** order and create a payment session in the payment gateway. Use **Idempotency-Key** header to prevent double submission. 
         * @summary Create checkout session
         * @param {CheckoutRequest} checkoutRequest 
         * @param {string} [idempotencyKey] Client-provided idempotency key to prevent duplicates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPost: async (checkoutRequest: CheckoutRequest, idempotencyKey?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkoutRequest' is not null or undefined
            assertParamExists('checkoutPost', 'checkoutRequest', checkoutRequest)
            const localVarPath = `/checkout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (idempotencyKey != null) {
                localVarHeaderParameter['Idempotency-Key'] = String(idempotencyKey);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkoutRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CheckoutApi - functional programming interface
 * @export
 */
export const CheckoutApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CheckoutApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a **pending** order and create a payment session in the payment gateway. Use **Idempotency-Key** header to prevent double submission. 
         * @summary Create checkout session
         * @param {CheckoutRequest} checkoutRequest 
         * @param {string} [idempotencyKey] Client-provided idempotency key to prevent duplicates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkoutPost(checkoutRequest: CheckoutRequest, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CheckoutSession>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkoutPost(checkoutRequest, idempotencyKey, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CheckoutApi.checkoutPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CheckoutApi - factory interface
 * @export
 */
export const CheckoutApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CheckoutApiFp(configuration)
    return {
        /**
         * Create a **pending** order and create a payment session in the payment gateway. Use **Idempotency-Key** header to prevent double submission. 
         * @summary Create checkout session
         * @param {CheckoutApiCheckoutPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkoutPost(requestParameters: CheckoutApiCheckoutPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CheckoutSession> {
            return localVarFp.checkoutPost(requestParameters.checkoutRequest, requestParameters.idempotencyKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for checkoutPost operation in CheckoutApi.
 * @export
 * @interface CheckoutApiCheckoutPostRequest
 */
export interface CheckoutApiCheckoutPostRequest {
    /**
     * 
     * @type {CheckoutRequest}
     * @memberof CheckoutApiCheckoutPost
     */
    readonly checkoutRequest: CheckoutRequest

    /**
     * Client-provided idempotency key to prevent duplicates
     * @type {string}
     * @memberof CheckoutApiCheckoutPost
     */
    readonly idempotencyKey?: string
}

/**
 * CheckoutApi - object-oriented interface
 * @export
 * @class CheckoutApi
 * @extends {BaseAPI}
 */
export class CheckoutApi extends BaseAPI {
    /**
     * Create a **pending** order and create a payment session in the payment gateway. Use **Idempotency-Key** header to prevent double submission. 
     * @summary Create checkout session
     * @param {CheckoutApiCheckoutPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CheckoutApi
     */
    public checkoutPost(requestParameters: CheckoutApiCheckoutPostRequest, options?: RawAxiosRequestConfig) {
        return CheckoutApiFp(this.configuration).checkoutPost(requestParameters.checkoutRequest, requestParameters.idempotencyKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeliveryApi - axios parameter creator
 * @export
 */
export const DeliveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns signed URLs (short expiry) and/or license keys after successful payment.
         * @summary Get delivery (links & license keys)
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryGet: async (orderId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('ordersOrderIdDeliveryGet', 'orderId', orderId)
            const localVarPath = `/orders/{orderId}/delivery`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeliveryApi - functional programming interface
 * @export
 */
export const DeliveryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeliveryApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns signed URLs (short expiry) and/or license keys after successful payment.
         * @summary Get delivery (links & license keys)
         * @param {string} orderId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersOrderIdDeliveryGet(orderId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Delivery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersOrderIdDeliveryGet(orderId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DeliveryApi.ordersOrderIdDeliveryGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DeliveryApi - factory interface
 * @export
 */
export const DeliveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeliveryApiFp(configuration)
    return {
        /**
         * Returns signed URLs (short expiry) and/or license keys after successful payment.
         * @summary Get delivery (links & license keys)
         * @param {DeliveryApiOrdersOrderIdDeliveryGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersOrderIdDeliveryGet(requestParameters: DeliveryApiOrdersOrderIdDeliveryGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Delivery> {
            return localVarFp.ordersOrderIdDeliveryGet(requestParameters.orderId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for ordersOrderIdDeliveryGet operation in DeliveryApi.
 * @export
 * @interface DeliveryApiOrdersOrderIdDeliveryGetRequest
 */
export interface DeliveryApiOrdersOrderIdDeliveryGetRequest {
    /**
     * 
     * @type {string}
     * @memberof DeliveryApiOrdersOrderIdDeliveryGet
     */
    readonly orderId: string
}

/**
 * DeliveryApi - object-oriented interface
 * @export
 * @class DeliveryApi
 * @extends {BaseAPI}
 */
export class DeliveryApi extends BaseAPI {
    /**
     * Returns signed URLs (short expiry) and/or license keys after successful payment.
     * @summary Get delivery (links & license keys)
     * @param {DeliveryApiOrdersOrderIdDeliveryGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeliveryApi
     */
    public ordersOrderIdDeliveryGet(requestParameters: DeliveryApiOrdersOrderIdDeliveryGetRequest, options?: RawAxiosRequestConfig) {
        return DeliveryApiFp(this.configuration).ordersOrderIdDeliveryGet(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * WebhooksApi - axios parameter creator
 * @export
 */
export const WebhooksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Endpoint receives events from the gateway (at-least-once delivery). Handler MUST be idempotent: deduplicate by `event.id`. 
         * @summary Payment gateway webhook
         * @param {string} xSignature HMAC signature from gateway
         * @param {string} xEventId Unique event ID from gateway
         * @param {string} xEventTimestamp Event timestamp
         * @param {PaymentEvent} paymentEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPaymentPost: async (xSignature: string, xEventId: string, xEventTimestamp: string, paymentEvent: PaymentEvent, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xSignature' is not null or undefined
            assertParamExists('webhooksPaymentPost', 'xSignature', xSignature)
            // verify required parameter 'xEventId' is not null or undefined
            assertParamExists('webhooksPaymentPost', 'xEventId', xEventId)
            // verify required parameter 'xEventTimestamp' is not null or undefined
            assertParamExists('webhooksPaymentPost', 'xEventTimestamp', xEventTimestamp)
            // verify required parameter 'paymentEvent' is not null or undefined
            assertParamExists('webhooksPaymentPost', 'paymentEvent', paymentEvent)
            const localVarPath = `/webhooks/payment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            if (xSignature != null) {
                localVarHeaderParameter['X-Signature'] = String(xSignature);
            }
            if (xEventId != null) {
                localVarHeaderParameter['X-Event-Id'] = String(xEventId);
            }
            if (xEventTimestamp != null) {
                localVarHeaderParameter['X-Event-Timestamp'] = typeof xEventTimestamp === 'string'
                    ? xEventTimestamp
                    : JSON.stringify(xEventTimestamp);
            }
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(paymentEvent, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WebhooksApi - functional programming interface
 * @export
 */
export const WebhooksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = WebhooksApiAxiosParamCreator(configuration)
    return {
        /**
         * Endpoint receives events from the gateway (at-least-once delivery). Handler MUST be idempotent: deduplicate by `event.id`. 
         * @summary Payment gateway webhook
         * @param {string} xSignature HMAC signature from gateway
         * @param {string} xEventId Unique event ID from gateway
         * @param {string} xEventTimestamp Event timestamp
         * @param {PaymentEvent} paymentEvent 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async webhooksPaymentPost(xSignature: string, xEventId: string, xEventTimestamp: string, paymentEvent: PaymentEvent, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WebhookAck>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.webhooksPaymentPost(xSignature, xEventId, xEventTimestamp, paymentEvent, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['WebhooksApi.webhooksPaymentPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * WebhooksApi - factory interface
 * @export
 */
export const WebhooksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = WebhooksApiFp(configuration)
    return {
        /**
         * Endpoint receives events from the gateway (at-least-once delivery). Handler MUST be idempotent: deduplicate by `event.id`. 
         * @summary Payment gateway webhook
         * @param {WebhooksApiWebhooksPaymentPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        webhooksPaymentPost(requestParameters: WebhooksApiWebhooksPaymentPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<WebhookAck> {
            return localVarFp.webhooksPaymentPost(requestParameters.xSignature, requestParameters.xEventId, requestParameters.xEventTimestamp, requestParameters.paymentEvent, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for webhooksPaymentPost operation in WebhooksApi.
 * @export
 * @interface WebhooksApiWebhooksPaymentPostRequest
 */
export interface WebhooksApiWebhooksPaymentPostRequest {
    /**
     * HMAC signature from gateway
     * @type {string}
     * @memberof WebhooksApiWebhooksPaymentPost
     */
    readonly xSignature: string

    /**
     * Unique event ID from gateway
     * @type {string}
     * @memberof WebhooksApiWebhooksPaymentPost
     */
    readonly xEventId: string

    /**
     * Event timestamp
     * @type {string}
     * @memberof WebhooksApiWebhooksPaymentPost
     */
    readonly xEventTimestamp: string

    /**
     * 
     * @type {PaymentEvent}
     * @memberof WebhooksApiWebhooksPaymentPost
     */
    readonly paymentEvent: PaymentEvent
}

/**
 * WebhooksApi - object-oriented interface
 * @export
 * @class WebhooksApi
 * @extends {BaseAPI}
 */
export class WebhooksApi extends BaseAPI {
    /**
     * Endpoint receives events from the gateway (at-least-once delivery). Handler MUST be idempotent: deduplicate by `event.id`. 
     * @summary Payment gateway webhook
     * @param {WebhooksApiWebhooksPaymentPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WebhooksApi
     */
    public webhooksPaymentPost(requestParameters: WebhooksApiWebhooksPaymentPostRequest, options?: RawAxiosRequestConfig) {
        return WebhooksApiFp(this.configuration).webhooksPaymentPost(requestParameters.xSignature, requestParameters.xEventId, requestParameters.xEventTimestamp, requestParameters.paymentEvent, options).then((request) => request(this.axios, this.basePath));
    }
}



